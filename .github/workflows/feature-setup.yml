name: Feature Setup (Epic + sub-issues)

on:
  workflow_dispatch:
    inputs:
      feature_title:
        description: "Feature title (e.g. Achievements — Shards & Mercy (v1))"
        required: true
        type: string
      bot_label:
        description: "bot:* label"
        required: true
        type: choice
        options: [bot:reminder, bot:welcomecrew, bot:matchmaker, bot:achievements]
      comp_label:
        description: "comp:* label (main component)"
        required: true
        type: choice
        options:
          [comp:commands, comp:scheduler, comp:health, comp:config, comp:data-sheets,
           comp:cache, comp:roles, comp:onboarding, comp:placement, comp:ocr,
           comp:shards, comp:ops-contract]
      epic_summary:
        description: "1-paragraph Summary"
        required: false
        type: string
        default: ""
      problem_goal:
        description: "Problem / goal"
        required: false
        type: string
        default: ""
      use_cases:
        description: "Use cases (one per line; will be bullets)"
        required: false
        type: string
        default: ""
      subtasks:
        description: "Sub-issues (one per line). Leave blank to use defaults."
        required: false
        type: string
        default: ""

permissions:
  contents: read
  issues: write

jobs:
  make:
    runs-on: ubuntu-latest
    steps:
      - name: Create epic + sub-issues
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            const title = core.getInput('feature_title').trim();
            const bot = core.getInput('bot_label').trim();
            const comp = core.getInput('comp_label').trim();
            const summary = core.getInput('epic_summary').trim();
            const problem = core.getInput('problem_goal').trim();
            const useCasesRaw = core.getInput('use_cases').trim();
            const subtasksRaw = core.getInput('subtasks').trim();

            const useCases = useCasesRaw
              ? useCasesRaw.split(/\r?\n/).map(s => s.trim()).filter(Boolean)
              : [];

            const defaultSubs = [
              "Guards & config",
              "Sheets adapters",
              "Watcher (OCR/manual)",
              "Commands & UI",
              "Mercy engine & ledger",
              "Summary renderer (weekly pinned)",
              "Concurrency & rate limits",
              "Validation & staff tools"
            ];
            const subs = subtasksRaw
              ? subtasksRaw.split(/\r?\n/).map(s => s.trim()).filter(Boolean)
              : defaultSubs;

            const labelsEpic = ["feature", bot, comp];

            const bullets = useCases.length ? useCases.map(u => `- ${u}`).join("\n") : "- (to be refined)";
            const plan = subs.map(s => `- [ ] ${s}`).join("\n");

            const epicBody = `
### Summary
${summary || "(fill in 1 paragraph)"}

### Problem / goal
${problem || "(who is blocked, what outcome improves)"}

### Core use cases (v1)
${bullets}

### High-level design (agreed)
- Module: ${bot} / ${comp}
- Data: snapshots (inventory) + events (pull ledger)
- Commands/UI: outline modal/commands; weekly summary rules
- Guards/ops: thread-only, role gating, retries/backoff

### Implementation plan (v1 steps)
${plan}

### Acceptance criteria (testable)
- [ ] Given/When/Then bullets…

### Rollout
Dry-run in 1–2 clans/servers; staff override available; fallback = manual entry only.
`.trim();

            // Create epic
            const epic = await github.rest.issues.create({
              owner, repo,
              title: `[Feature] ${title}`,
              labels: labelsEpic,
              body: epicBody
            });
            const epicNum = epic.data.number;

            // Create sub-issues (Watcher → comp:ocr; others → main comp)
            const linkLines = [];
            for (const s of subs) {
              const lower = s.toLowerCase();
              const compForSub = (lower.includes('watcher') || lower.includes('ocr')) ? 'comp:ocr' : comp;
              const labelsSub = ["feature", bot, compForSub];

              const sub = await github.rest.issues.create({
                owner, repo,
                title: `[Feature] ${s} — ${title}`,
                labels: labelsSub,
                body: `Split from #${epicNum}`
              });
              linkLines.push(`- [ ] ${s} (#${sub.data.number})`);
            }

            // Append checklist to epic
            const updatedBody = `${epic.data.body}\n\n### Sub-issues\n${linkLines.join("\n")}`;
            await github.rest.issues.update({
              owner, repo, issue_number: epicNum, body: updatedBody
            });

            core.summary
              .addHeading('Feature setup created')
              .addRaw(`Epic: #${epicNum}\n\n${linkLines.join("\n")}`)
              .write();
