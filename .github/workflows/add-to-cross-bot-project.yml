name: Add issues to Cross-Bot Hotlist
on:
  issues:
    types: [opened, reopened, labeled, edited, transferred]

jobs:
  add:
    runs-on: ubuntu-latest
    steps:
      - name: Add to user project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/cailleanC1C/projects/1
          github-token: ${{ secrets.PROJECTS_TOKEN }}

      - name: Set Priority field from P* label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const PROJECT_OWNER = 'cailleanC1C';
            const PROJECT_NUMBER = <PROJECT_NUMBER>;

            const labels = (github.event.issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const priority = ['P0','P1','P2','P3','P4'].find(p => labels.includes(p));
            if (!priority) {
              core.info('No P* label on this issue; skipping Priority update.');
              return;
            }

            const issueNodeId = github.event.issue.node_id;

            // 1) Fetch project + Priority field + options
            const proj = await github.graphql(`
              query($owner:String!, $number:Int!) {
                user(login:$owner) {
                  projectV2(number:$number) {
                    id
                    fields(first:50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `, { owner: PROJECT_OWNER, number: PROJECT_NUMBER });

            const project = proj.user?.projectV2;
            if (!project) core.setFailed('Project not found.');

            const field = project.fields.nodes.find(f => f?.name === 'Priority');
            if (!field) core.setFailed('Priority field not found on project.');

            const opt = field.options.find(o => o.name === priority);
            if (!opt) core.setFailed(`Priority option ${priority} not found.`);

            // 2) Ensure item exists in the project, get the item ID
            const existing = await github.graphql(`
              query($id:ID!) {
                node(id:$id) {
                  ... on Issue {
                    projectItems(first:50, includeArchived:false) {
                      nodes { id project { id } }
                    }
                  }
                }
              }
            `, { id: issueNodeId });

            let itemId = existing.node.projectItems.nodes.find(n => n.project.id === project.id)?.id;

            if (!itemId) {
              const addRes = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!) {
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                    item { id }
                  }
                }
              `, { projectId: project.id, contentId: issueNodeId });
              itemId = addRes.addProjectV2ItemById.item.id;
            }

            // 3) Set the Priority single-select value
            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) { clientMutationId }
              }
            `, { projectId: project.id, itemId, fieldId: field.id, optionId: opt.id });

            core.info(`Priority set to ${priority}.`);

